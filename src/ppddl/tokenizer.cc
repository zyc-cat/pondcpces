
#line 3 "tokenizer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 78
#define YY_END_OF_BUFFER 79
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[563] =
    {   0,
        0,    0,   79,   77,   75,   76,   70,   70,   77,   70,
       67,   77,   77,   70,   70,   77,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       75,    0,   67,   67,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   68,   69,   66,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   51,   65,   65,   65,   65,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   74,    0,    0,   66,
       50,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   49,   65,   65,   65,   65,   65,   65,
       65,    0,   22,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   30,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   73,    0,   71,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   48,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   41,    0,

       38,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   72,   65,
       65,   65,   65,   65,   65,   65,   65,   52,   65,   65,
       65,   65,   65,   56,   65,   65,   65,   65,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   32,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    5,    0,    0,
       58,   65,    1,    2,   47,   53,   54,   65,   65,   65,
       65,   45,   46,   65,   65,   65,   65,   31,    0,    0,
        0,    0,    0,   36,    0,   35,    0,    0,    0,    0,

        0,    0,   42,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   12,   13,    0,   65,   65,   65,
       65,   65,   65,    3,   65,   65,   57,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   21,    0,    0,   40,
        0,    0,   37,    0,   10,    0,    0,    0,    0,    0,
        0,   29,    0,   62,   65,   61,   64,   63,   65,   65,
       59,    0,    0,    0,   43,    0,    0,    0,   16,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   65,   65,   65,    0,    6,    0,    0,    0,
        0,    0,   11,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   65,   65,   60,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   33,    0,    7,
        0,    0,    0,    0,   65,   65,    0,    0,    0,    0,
        0,    0,   39,    0,    0,    9,    0,    0,    0,    0,
        0,   65,   65,    0,    0,    0,    0,    0,    0,    0,
        0,    8,   34,    0,    0,    4,    0,   65,   55,    0,
        0,    0,    0,    0,    0,    0,    0,   27,    0,    0,
       65,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   65,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   44,    0,    0,    0,    0,   23,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   28,    0,    0,    0,    0,   25,    0,    0,
        0,    0,    0,    0,    0,   20,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   24,    0,    0,   26,    0,    0,    0,    0,   14,
        0,    0,    0,    0,    0,   18,    0,    0,   19,   15,
       17,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    5,
        6,    6,    6,    1,    7,    8,    9,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   11,   12,   13,
       14,   15,   16,    1,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
        1,    1,    1,    1,   43,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[70] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    2,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static const flex_int16_t yy_base[572] =
    {   0,
        0,    0, 1127, 1128,   68, 1128, 1128,   65, 1116, 1115,
       68,   62, 1112, 1109, 1108,    0,   70,    0,   59,   63,
       58,   70,  104,  112,  104,  113,  102,  119,  109,  116,
      100, 1111,  136, 1110,  129,  111,  146,  151,  144,  120,
      121,  123,  165,  161,  169,  171,  153,  172,  158,  154,
      166, 1116, 1116, 1128, 1128,    0,    0,  177,  166,  184,
      173,  171,  200,  192,  210,  199,  216,  196,  207,  202,
      210,  214,  220,    0,  211,  226,  217,  224,  210,  219,
      218,  214,  221,  217,  233,  219,  236,  234,  223,  231,
      262,  246,  256,  253,  253,  267,  261,  266,  259,  273,

      278,  263,  263,  266,  274, 1114, 1128, 1113, 1110,    0,
        0,  275,  269,  280,  292,  286,  276,  296,  286,  287,
      299,  309,  310,    0,  321,  322,  313,  327,  318,  317,
      318,  324, 1128,  332,  331,  334,  336,  333,  338,  326,
      323,  338,  344,  336,  340,  333, 1128,  353,  371, 1107,
      368,  372,  380,  379,  382,  371,  365,  386,  379,  384,
      368, 1110, 1128, 1109, 1128,  384,  387,  380,  386,  391,
      377,  389, 1104,  377,  398,  392,  393,  402,  422,  420,
      426,  426,  420,    0,  421,  428,  419,  431,  426,  421,
      434,  424,  442,  434,  427,  428,  435,  430, 1103,  425,

     1128,  446,  436,  453,  456,  442,  448,  464,  471,  480,
      465,  480,  472,  475,  473,  479,  489, 1068, 1128,  481,
      495,  492,  484,  481,  481,  489,  486,    0,  502,  495,
      496,  491,  490,    0,  509,  508, 1063,  491,  501,  513,
      533,  521,  518,  529,  530,  536,  526,  538, 1128,  543,
      529,  541,  533,  537,  550,  545,  550,  536,  535,  553,
      545,  560,  562,  556,  549,  564,  550, 1128,  580,  570,
        0,  570,    0,    0,    0,    0,    0,  575,  578,  572,
      573,    0,    0,  591,  588,  598,  589, 1128,  595,  591,
      585,  593,  605, 1128,  595, 1128,  589,  597,  593,  598,

      613,  607, 1128,  600,  603,  622,  642,  622,  647,  651,
      644,  648,  650,  637, 1128, 1128,  638,  653,  644,  655,
      656,  657,  651,    0,  649,  649,    0,  651,  647,  656,
      652,  653,  661,  671,  652,  675, 1128,  682,  674, 1128,
      696,  700, 1128,  686, 1128,  702,  699,  689,  698,  702,
      699, 1128,  712,    0,  712,    0,    0,    0,  706,  693,
        0,  703,  699,  698, 1128,  711, 1062, 1060, 1128,  712,
      706,  725, 1059,  709,  720,  712,  711,  744,  741,  746,
      750,  747,  759,  742,  748,  762, 1128,  745,  743,  757,
      766,  767, 1128,  751,  754,  758,  757,  754,  765,  756,

      760,  776,  767, 1058,  781,  764,    0,  773, 1054,  798,
      790,  802,  797,  809,  796,  806,  802, 1128,  802, 1128,
      798,  152,  799,  804,  812,  813,  150,  818,  148,  819,
      805,  147, 1128,  821,  813,  809,  815,  824,  818,  816,
      819,  826,  836,  852,  852,  843,  846,  858,  852,  866,
      861, 1128, 1128,  868,  854, 1128,  868,  865,    0,  869,
      870,  859,  857,  864,  862,  866,  863,  143,  878,  884,
      868,  883,  886,  887,  892,  897,  907,  899,  897,  916,
      919,  908,  899,  920,  923,  924,  916,  910,  927,  927,
      923,  927,  919,  921,    0,  933,  917,  926,  933, 1128,

      928,  936,  943,  941,  951,  962,  947,  952,  961,  956,
      963,  958, 1128,  974,  976,  972,  963, 1128,  979,  975,
      981,  977,  984,  979,  969, 1128,  981,  986,  986,  981,
      977,  979,  991,  981, 1000, 1000, 1007, 1006, 1020, 1015,
     1022, 1128, 1023, 1014, 1128, 1019, 1021, 1021, 1022, 1128,
     1024, 1020, 1026, 1027, 1023, 1128, 1024, 1025, 1128, 1128,
     1128, 1128, 1087,   68, 1089, 1092, 1095, 1097, 1100, 1103,
     1106
    } ;

static const flex_int16_t yy_def[572] =
    {   0,
      562,    1,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  563,  562,  562,  564,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  566,  567,  562,  562,  568,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,

      562,  562,  562,  562,  562,  566,  562,  569,  570,  568,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  569,  562,  571,  562,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,

      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  571,  562,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,

      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  565,  565,  565,  565,  565,  565,  565,
      565,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  565,  565,  565,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,

      562,  562,  562,  562,  565,  565,  565,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  565,  565,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  565,  565,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  565,  565,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      565,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  565,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  565,  562,  562,  562,  562,  562,

      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,    0,  562,  562,  562,  562,  562,  562,  562,  562,
      562
    } ;

static const flex_int16_t yy_nxt[1198] =
    {   0,
        4,    5,    6,    5,    7,    7,    8,    9,   10,   11,
       12,   13,   14,    7,   15,   16,   17,   18,   18,   19,
       20,   21,   22,   18,   23,   18,   18,   18,   24,   25,
       26,   27,   18,   18,   28,   18,   29,   18,   30,   18,
       18,   18,    4,   17,   18,   18,   19,   20,   21,   22,
       18,   23,   18,   18,   18,   24,   25,   26,   27,   18,
       18,   28,   18,   29,   18,   30,   18,   18,   18,   31,
       56,   31,   32,   32,   33,   32,   32,   33,   35,   60,
       36,   37,   38,   39,   40,   41,   42,   62,   64,   61,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   58,

       65,   31,   63,   31,   59,   35,   60,   36,   37,   38,
       39,   40,   41,   42,   62,   64,   61,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   58,   65,   68,   63,
       72,   59,   66,   67,   70,   75,   69,   76,   77,   78,
       71,   81,   73,   32,   32,   33,   74,   79,   80,  480,
       91,   92,   93,  449,  446,   68,  444,   72,  439,   66,
       67,   70,   75,   69,   76,   77,   78,   71,   81,   73,
       82,   89,   85,   74,   79,   80,   83,   91,   92,   93,
       90,   96,   84,   86,   94,   95,   98,   99,   87,  101,
       88,   97,  102,  103,  104,  105,  111,   82,   89,   85,

      112,  115,  113,   83,  100,  114,  116,   90,   96,   84,
       86,   94,   95,   98,   99,   87,  101,   88,   97,  102,
      103,  104,  105,  111,  117,  118,  119,  112,  115,  113,
      120,  100,  114,  116,  121,  122,  123,  124,  125,  126,
      127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
      137,  117,  118,  119,  138,  139,  140,  120,  141,  142,
      143,  121,  122,  123,  124,  125,  126,  127,  128,  129,
      130,  131,  132,  133,  134,  135,  136,  137,  144,  145,
      146,  138,  139,  140,  147,  141,  142,  143,  148,  149,
      150,  151,  153,  154,  156,  157,  159,  160,  161,  166,

      152,  158,  167,  155,  168,  144,  145,  146,  169,  170,
      171,  147,  172,  173,  174,  148,  149,  150,  151,  153,
      154,  156,  157,  159,  160,  161,  166,  152,  158,  167,
      155,  168,  175,  176,  177,  169,  170,  171,  178,  172,
      173,  174,  179,  180,  181,  182,  183,  184,  185,  189,
      191,  186,  192,  193,  194,  195,  190,  196,  197,  175,
      176,  177,  198,  199,  200,  178,  187,  188,  201,  179,
      180,  181,  182,  183,  184,  185,  189,  191,  186,  192,
      193,  194,  195,  190,  196,  197,  202,  203,  205,  198,
      199,  200,  206,  187,  188,  201,  207,  208,  209,  210,

      211,  212,  213,  214,  215,  217,  220,  221,  216,  222,
      223,  224,  225,  202,  203,  205,  226,  228,  229,  206,
      230,  231,  232,  207,  208,  209,  210,  211,  212,  213,
      214,  215,  217,  220,  221,  216,  222,  223,  224,  225,
      233,  234,  235,  226,  228,  229,  237,  230,  231,  232,
      238,  239,  240,  236,  241,  242,  243,  244,  245,  246,
      247,  248,  249,  250,  251,  252,  254,  233,  234,  235,
      255,  256,  257,  237,  258,  259,  260,  238,  239,  240,
      236,  241,  242,  243,  244,  245,  246,  247,  248,  249,
      250,  251,  252,  254,  261,  262,  263,  255,  256,  257,

      264,  258,  259,  260,  265,  266,  267,  268,  269,  270,
      271,  272,  273,  274,  275,  276,  277,  278,  279,  280,
      281,  261,  262,  263,  282,  283,  284,  264,  285,  287,
      288,  265,  266,  267,  268,  269,  270,  271,  272,  273,
      274,  275,  276,  277,  278,  279,  280,  281,  289,  290,
      291,  282,  283,  284,  292,  285,  287,  288,  293,  294,
      295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
      305,  306,  307,  308,  309,  289,  290,  291,  310,  311,
      312,  292,  313,  314,  315,  293,  294,  295,  296,  297,
      298,  299,  300,  301,  302,  303,  304,  305,  306,  307,

      308,  309,  316,  317,  318,  310,  311,  312,  319,  313,
      314,  315,  320,  321,  322,  323,  324,  325,  327,  328,
      329,  330,  331,  332,  335,  333,  336,  337,  338,  316,
      317,  318,  334,  339,  326,  319,  340,  341,  342,  320,
      321,  322,  323,  324,  325,  327,  328,  329,  330,  331,
      332,  335,  333,  336,  337,  338,  343,  346,  344,  334,
      339,  326,  345,  340,  341,  342,  347,  348,  349,  350,
      351,  352,  353,  354,  355,  356,  357,  358,  359,  360,
      361,  362,  363,  343,  346,  344,  364,  365,  366,  345,
      367,  368,  369,  347,  348,  349,  350,  351,  352,  353,

      354,  355,  356,  357,  358,  359,  360,  361,  362,  363,
      370,  371,  372,  364,  365,  366,  373,  367,  368,  369,
      374,  375,  376,  377,  378,  379,  380,  381,  382,  383,
      384,  385,  386,  387,  388,  389,  392,  370,  371,  372,
      393,  394,  396,  373,  397,  398,  399,  374,  375,  376,
      377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
      387,  388,  389,  392,  400,  401,  402,  393,  394,  396,
      403,  397,  398,  399,  404,  405,  406,  407,  408,  409,
      410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
      420,  400,  401,  402,  421,  422,  423,  403,  425,  426,

      427,  404,  405,  406,  407,  408,  409,  410,  411,  412,
      413,  414,  415,  416,  417,  418,  419,  420,  429,  430,
      431,  421,  422,  423,  432,  425,  426,  427,  433,  434,
      435,  436,  437,  438,  440,  441,  442,  443,  445,  447,
      448,  450,  451,  452,  453,  429,  430,  431,  454,  455,
      456,  432,  457,  458,  459,  433,  434,  435,  436,  437,
      438,  440,  441,  442,  443,  445,  447,  448,  450,  451,
      452,  453,  460,  461,  462,  454,  455,  456,  463,  457,
      458,  459,  464,  465,  466,  467,  468,  469,  470,  471,
      472,  473,  474,  475,  476,  477,  478,  479,  481,  460,

      461,  462,  482,  483,  484,  463,  485,  486,  487,  464,
      465,  466,  467,  468,  469,  470,  471,  472,  473,  474,
      475,  476,  477,  478,  479,  481,  488,  489,  490,  482,
      483,  484,  491,  485,  486,  487,  492,  493,  494,  495,
      496,  497,  498,  499,  500,  501,  502,  503,  504,  505,
      506,  507,  508,  488,  489,  490,  509,  510,  511,  491,
      512,  513,  514,  492,  493,  494,  495,  496,  497,  498,
      499,  500,  501,  502,  503,  504,  505,  506,  507,  508,
      515,  516,  517,  509,  510,  511,  518,  512,  513,  514,
      519,  520,  521,  522,  523,  524,  525,  526,  527,  528,

      529,  530,  531,  532,  533,  534,  535,  515,  516,  517,
      536,  537,  538,  518,  539,  540,  541,  519,  520,  521,
      522,  523,  524,  525,  526,  527,  528,  529,  530,  531,
      532,  533,  534,  535,  542,  543,  544,  536,  537,  538,
      545,  539,  540,  541,  546,  547,  548,  549,  550,  551,
      552,  553,  554,  555,  556,  557,  558,  559,  560,  561,
      428,  542,  543,  544,  424,  395,  391,  545,  390,  286,
      219,  546,  547,  548,  549,  550,  551,  552,  553,  554,
      555,  556,  557,  558,  559,  560,  561,   52,   52,   52,
       57,   57,  106,  106,  106,  108,  108,  108,  110,  110,

      162,  162,  162,  164,  164,  164,  218,  218,  218,  253,
      227,  219,  163,  204,  165,  163,  107,  109,  107,   34,
       34,   55,   54,   53,   34,   34,  562,    3,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562

    } ;

static const flex_int16_t yy_chk[1198] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
      564,    5,    8,    8,    8,   11,   11,   11,   12,   19,
       12,   12,   12,   12,   12,   12,   12,   20,   21,   19,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   17,

       22,   31,   20,   31,   17,   12,   19,   12,   12,   12,
       12,   12,   12,   12,   20,   21,   19,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   17,   22,   24,   20,
       26,   17,   23,   23,   25,   27,   24,   28,   29,   30,
       25,   36,   26,   33,   33,   33,   26,   35,   35,  468,
       40,   41,   42,  432,  429,   24,  427,   26,  422,   23,
       23,   25,   27,   24,   28,   29,   30,   25,   36,   26,
       37,   39,   38,   26,   35,   35,   37,   40,   41,   42,
       39,   44,   37,   38,   43,   43,   45,   46,   38,   47,
       38,   44,   48,   49,   50,   51,   58,   37,   39,   38,

       59,   61,   60,   37,   46,   60,   62,   39,   44,   37,
       38,   43,   43,   45,   46,   38,   47,   38,   44,   48,
       49,   50,   51,   58,   63,   64,   65,   59,   61,   60,
       66,   46,   60,   62,   67,   68,   69,   70,   71,   72,
       73,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       84,   63,   64,   65,   85,   86,   87,   66,   88,   89,
       90,   67,   68,   69,   70,   71,   72,   73,   75,   76,
       77,   78,   79,   80,   81,   82,   83,   84,   91,   92,
       93,   85,   86,   87,   94,   88,   89,   90,   95,   96,
       97,   98,   99,  100,  101,  102,  103,  104,  105,  112,

       98,  102,  113,  100,  114,   91,   92,   93,  115,  116,
      117,   94,  118,  119,  120,   95,   96,   97,   98,   99,
      100,  101,  102,  103,  104,  105,  112,   98,  102,  113,
      100,  114,  121,  122,  123,  115,  116,  117,  125,  118,
      119,  120,  126,  127,  128,  129,  130,  131,  132,  135,
      136,  134,  137,  138,  139,  140,  135,  141,  142,  121,
      122,  123,  143,  144,  145,  125,  134,  134,  146,  126,
      127,  128,  129,  130,  131,  132,  135,  136,  134,  137,
      138,  139,  140,  135,  141,  142,  148,  149,  151,  143,
      144,  145,  152,  134,  134,  146,  153,  154,  154,  155,

      156,  157,  158,  159,  160,  161,  166,  167,  160,  168,
      169,  170,  171,  148,  149,  151,  172,  174,  175,  152,
      176,  177,  178,  153,  154,  154,  155,  156,  157,  158,
      159,  160,  161,  166,  167,  160,  168,  169,  170,  171,
      179,  180,  181,  172,  174,  175,  182,  176,  177,  178,
      183,  185,  186,  181,  187,  188,  189,  190,  191,  192,
      193,  194,  195,  196,  197,  198,  200,  179,  180,  181,
      202,  203,  204,  182,  205,  206,  207,  183,  185,  186,
      181,  187,  188,  189,  190,  191,  192,  193,  194,  195,
      196,  197,  198,  200,  208,  209,  210,  202,  203,  204,

      211,  205,  206,  207,  212,  213,  214,  215,  216,  217,
      220,  221,  222,  223,  224,  225,  226,  227,  229,  230,
      231,  208,  209,  210,  232,  233,  235,  211,  236,  238,
      239,  212,  213,  214,  215,  216,  217,  220,  221,  222,
      223,  224,  225,  226,  227,  229,  230,  231,  240,  241,
      242,  232,  233,  235,  243,  236,  238,  239,  244,  245,
      246,  247,  248,  250,  251,  252,  253,  254,  255,  256,
      257,  258,  259,  260,  261,  240,  241,  242,  262,  263,
      264,  243,  265,  266,  267,  244,  245,  246,  247,  248,
      250,  251,  252,  253,  254,  255,  256,  257,  258,  259,

      260,  261,  269,  270,  272,  262,  263,  264,  278,  265,
      266,  267,  279,  280,  281,  284,  285,  286,  287,  289,
      290,  291,  292,  293,  297,  295,  298,  299,  300,  269,
      270,  272,  295,  301,  286,  278,  302,  304,  305,  279,
      280,  281,  284,  285,  286,  287,  289,  290,  291,  292,
      293,  297,  295,  298,  299,  300,  306,  308,  307,  295,
      301,  286,  307,  302,  304,  305,  309,  310,  311,  312,
      313,  314,  317,  318,  319,  320,  321,  322,  323,  325,
      326,  328,  329,  306,  308,  307,  330,  331,  332,  307,
      333,  334,  335,  309,  310,  311,  312,  313,  314,  317,

      318,  319,  320,  321,  322,  323,  325,  326,  328,  329,
      336,  338,  339,  330,  331,  332,  341,  333,  334,  335,
      342,  344,  346,  347,  348,  349,  350,  351,  353,  355,
      359,  360,  362,  363,  364,  366,  370,  336,  338,  339,
      371,  372,  374,  341,  375,  376,  377,  342,  344,  346,
      347,  348,  349,  350,  351,  353,  355,  359,  360,  362,
      363,  364,  366,  370,  378,  379,  380,  371,  372,  374,
      381,  375,  376,  377,  382,  383,  384,  385,  386,  388,
      389,  390,  391,  392,  394,  395,  396,  397,  398,  399,
      400,  378,  379,  380,  401,  402,  403,  381,  405,  406,

      408,  382,  383,  384,  385,  386,  388,  389,  390,  391,
      392,  394,  395,  396,  397,  398,  399,  400,  410,  411,
      412,  401,  402,  403,  413,  405,  406,  408,  414,  415,
      416,  417,  419,  421,  423,  424,  425,  426,  428,  430,
      431,  434,  435,  436,  437,  410,  411,  412,  438,  439,
      440,  413,  441,  442,  443,  414,  415,  416,  417,  419,
      421,  423,  424,  425,  426,  428,  430,  431,  434,  435,
      436,  437,  444,  445,  446,  438,  439,  440,  447,  441,
      442,  443,  448,  449,  450,  451,  454,  455,  457,  458,
      460,  461,  462,  463,  464,  465,  466,  467,  469,  444,

      445,  446,  470,  471,  472,  447,  473,  474,  475,  448,
      449,  450,  451,  454,  455,  457,  458,  460,  461,  462,
      463,  464,  465,  466,  467,  469,  476,  477,  478,  470,
      471,  472,  479,  473,  474,  475,  480,  481,  482,  483,
      484,  485,  486,  487,  488,  489,  490,  491,  492,  493,
      494,  496,  497,  476,  477,  478,  498,  499,  501,  479,
      502,  503,  504,  480,  481,  482,  483,  484,  485,  486,
      487,  488,  489,  490,  491,  492,  493,  494,  496,  497,
      505,  506,  507,  498,  499,  501,  508,  502,  503,  504,
      509,  510,  511,  512,  514,  515,  516,  517,  519,  520,

      521,  522,  523,  524,  525,  527,  528,  505,  506,  507,
      529,  530,  531,  508,  532,  533,  534,  509,  510,  511,
      512,  514,  515,  516,  517,  519,  520,  521,  522,  523,
      524,  525,  527,  528,  535,  536,  537,  529,  530,  531,
      538,  532,  533,  534,  539,  540,  541,  543,  544,  546,
      547,  548,  549,  551,  552,  553,  554,  555,  557,  558,
      409,  535,  536,  537,  404,  373,  368,  538,  367,  237,
      218,  539,  540,  541,  543,  544,  546,  547,  548,  549,
      551,  552,  553,  554,  555,  557,  558,  563,  563,  563,
      565,  565,  566,  566,  566,  567,  567,  567,  568,  568,

      569,  569,  569,  570,  570,  570,  571,  571,  571,  199,
      173,  164,  162,  150,  109,  108,  106,   53,   52,   34,
       32,   15,   14,   13,   10,    9,    3,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "tokenizer.ll"
/* -*-C++-*- */
/*
 * Tokenizer.
 *
 * Copyright (C) 2003 Carnegie Mellon University and Rutgers University
 *
 * Permission is hereby granted to distribute this software for
 * non-commercial research purposes, provided that this copyright
 * notice is included with any such distribution.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
 * SOFTWARE IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU
 * ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
 *
 * $Id: tokenizer.ll,v 1.1 2006/07/11 17:53:06 dan Exp $
 */
#line 22 "tokenizer.ll"
#include <config.h>
#include "effects.h"
#include "formulas.h"
#include "terms.h"
#include "types.h"
#include "rational.h"
#include <cctype>
#include <string>
#include "observations.h"


struct Expression;
struct Application;
/// struct Observation;

 class plan;
 class Instruction;
 class Guards;
 class label_symbol;

#include "parser.h"// include the token generate from bison

/* Current line number. */
size_t line_number;

/* Allocates a string containing the lowercase characters of the given
   C string, and returns the given token. */
static int make_string(const char* s, int token);
/* Makes a number of the given string, and return the NUMBER token. */
static int make_number(const char* s);

#line 948 "tokenizer.cc"
#line 949 "tokenizer.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 59 "tokenizer.ll"


#line 1167 "tokenizer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 563 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 562 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 61 "tokenizer.ll"
return make_string(yytext, DEFINE);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 62 "tokenizer.ll"
return make_string(yytext, DOMAIN_TOKEN);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 63 "tokenizer.ll"
return make_string(yytext, PROBLEM);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 64 "tokenizer.ll"
return REQUIREMENTS;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "tokenizer.ll"
return TYPES;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "tokenizer.ll"
return CONSTANTS;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "tokenizer.ll"
return PREDICATES;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "tokenizer.ll"
return OBSERVABLES;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "tokenizer.ll"
return OBSERVATION;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "tokenizer.ll"
return OBSERVE;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "tokenizer.ll"
return FUNCTIONS;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "tokenizer.ll"
return STRIPS;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "tokenizer.ll"
return TYPING;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "tokenizer.ll"
return NEGATIVE_PRECONDITIONS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "tokenizer.ll"
return DISJUNCTIVE_PRECONDITIONS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "tokenizer.ll"
return EQUALITY;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "tokenizer.ll"
return EXISTENTIAL_PRECONDITIONS;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "tokenizer.ll"
return UNIVERSAL_PRECONDITIONS;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "tokenizer.ll"
return QUANTIFIED_PRECONDITIONS;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "tokenizer.ll"
return CONDITIONAL_EFFECTS;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "tokenizer.ll"
return FLUENTS;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "tokenizer.ll"
return ADL;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "tokenizer.ll"
return DURATIVE_ACTIONS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "tokenizer.ll"
return DURATION_INEQUALITIES;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "tokenizer.ll"
return CONTINUOUS_EFFECTS;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "tokenizer.ll"
return PROBABILISTIC_EFFECTS;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "tokenizer.ll"
return PROBABILISTIC_DYNAMICS;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "tokenizer.ll"
return NON_DETERMINISTIC_DYNAMICS;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "tokenizer.ll"
return REWARDS;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "tokenizer.ll"
return MDP;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "tokenizer.ll"
return ACTION;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "tokenizer.ll"
return EVENT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "tokenizer.ll"
return PARAMETERS;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "tokenizer.ll"
return PRECONDITION;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "tokenizer.ll"
return EFFECT;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "tokenizer.ll"
return PDOMAIN;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "tokenizer.ll"
return OBJECTS;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "tokenizer.ll"
return INIT;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "tokenizer.ll"
return GOAL_REWARD;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "tokenizer.ll"
return HORIZON;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "tokenizer.ll"
return GOAL;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "tokenizer.ll"
return METRIC;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "tokenizer.ll"
return DISC;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "tokenizer.ll"
return make_string(yytext, GOAL_PROBABILITY);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "tokenizer.ll"
return make_string(yytext, NUMBER_TOKEN);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "tokenizer.ll"
return make_string(yytext, OBJECT_TOKEN);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "tokenizer.ll"
return make_string(yytext, EITHER);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "tokenizer.ll"
return make_string(yytext, WHEN);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "tokenizer.ll"
return make_string(yytext, NOT);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "tokenizer.ll"
return make_string(yytext, AND);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "tokenizer.ll"
return make_string(yytext, OR);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "tokenizer.ll"
return make_string(yytext, IMPLY);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "tokenizer.ll"
return make_string(yytext, EXISTS);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "tokenizer.ll"
return make_string(yytext, FORALL);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "tokenizer.ll"
return make_string(yytext, PROBABILISTIC);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "tokenizer.ll"
return make_string(yytext, ONEOF);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "tokenizer.ll"
return make_string(yytext, UNKNOWN);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "tokenizer.ll"
return make_string(yytext, ASSIGN);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "tokenizer.ll"
return make_string(yytext, SCALE_UP);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "tokenizer.ll"
return make_string(yytext, SCALE_DOWN);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "tokenizer.ll"
return make_string(yytext, INCREASE);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "tokenizer.ll"
return make_string(yytext, DECREASE);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "tokenizer.ll"
return make_string(yytext, MINIMIZE);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "tokenizer.ll"
return make_string(yytext, MAXIMIZE);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "tokenizer.ll"
return make_string(yytext, NAME);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "tokenizer.ll"
return make_string(yytext, VARIABLE);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "tokenizer.ll"
return make_number(yytext);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "tokenizer.ll"
return LE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "tokenizer.ll"
return GE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "tokenizer.ll"
return yytext[0];
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "tokenizer.ll"
return ANTI_COMMENT;
	YY_BREAK
case 72:
/* rule 72 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 132 "tokenizer.ll"
/* comment */
	YY_BREAK
case 73:
/* rule 73 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 133 "tokenizer.ll"
/* comment */
	YY_BREAK
case 74:
/* rule 74 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 134 "tokenizer.ll"
/* comment */
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "tokenizer.ll"
/* whitespace */
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 136 "tokenizer.ll"
line_number++;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "tokenizer.ll"
return ILLEGAL_TOKEN;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 139 "tokenizer.ll"
ECHO;
	YY_BREAK
#line 1626 "tokenizer.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 563 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 563 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 562);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 139 "tokenizer.ll"


/* Allocates a string containing the lowercase characters of the given
   C string, and returns the given token. */
static int make_string(const char* s, int token) {
  std::string* result = new std::string();
  for (const char* p = s; *p != '\0'; p++) {
    *result += (*p);//tolower(*p);
  }
  yylval.str = result;
  return token;
}


/* Makes a number of the given string, and return the NUMBER token. */
static int make_number(const char* s) {
  //cout << "Make number "<< s << endl;
  yylval.num = new Rational(s);
  return NUMBER;
}

